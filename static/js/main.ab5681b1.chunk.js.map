{"version":3,"sources":["pages/Login.js","Card.js","pages/Countries.js","components/AuthCheck.js","App.js","reportWebVitals.js","index.js"],"names":["props","className","onSubmit","e","preventDefault","console","log","data","email","target","value","pass","options","method","headers","body","JSON","stringify","nativeEvent","submitter","id","alert","fetch","then","result","json","output","status","message","localStorage","setItem","token","setIsLoggedIn","removeItem","type","src","imgSrc","name","Countries","useState","countryList","setCountryList","useEffect","map","item","flag","isLoggedIn","children","App","getItem","countries","personalRoutes","path","AuthCheck","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.ab5681b1.chunk.js","sourcesContent":["import './Login.css';\n\nexport default function(props){\n\n    let submitHandler = (e) => {\n        e.preventDefault();\n        console.log(e);\n\n        let data = {};\n\n        data.email = e.target[0].value;\n        data.pass = e.target[1].value;\n\n        let urlRegister = 'https://auth404.herokuapp.com/api/auth/register';\n        let urlLogin = 'https://auth404.herokuapp.com/api/auth/login';\n        let options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body:JSON.stringify(data)\n        }\n\n        if(e.nativeEvent.submitter.id ==\"register\"){\n            alert('register');\n            fetch(urlRegister, options).then(result=>result.json().then(output=>{\n                if(output.status == 'success'){\n                    alert('Congrats! You registered as well! Please login!');\n                }else{\n                    alert(output.message);\n                }\n            }));\n        }else if(e.nativeEvent.submitter.id ==\"login\"){\n            alert('else');\n            fetch(urlLogin, options).then(result=>result.json().then(output=> {\n                if(output.status == 'success'){\n                    localStorage.setItem('token', output.token);\n                    props.setIsLoggedIn(true);\n                }else{\n                    localStorage.removeItem('token');\n                }\n            }));\n        }\n    }\n\n    return(\n        <div className=\"wrapper\">\n            <form onSubmit = {submitHandler}>\n                <input type = \"email\" />\n                <input type = \"password\" />\n                <input id = \"register\" type = \"submit\" value = \"Register\" />\n                <input id = \"login\" type = \"submit\" value = \"Login\" />\n            </form>\n        </div>\n    )\n}","import './Card.css';\n\nexport default function(props){\n    return (\n        <div className=\"flag\">\n            <img src = {props.imgSrc}/>\n            <h3>{props.name}</h3>\n        </div>\n    );\n}","import {useState, useEffect} from 'react';\nimport Card from '../Card';\nimport '../App.css';\n\n\nfunction Countries() {\n\n  const [countryList, setCountryList] = useState([]);\n\n  let url = 'https://restcountries.eu/rest/v2/all';\n  let options = {\n    method:\"GET\"\n    //timeDiff:'Id',\n    //component: item => <li>{item.name}</li>,\n    //log:true\n  };\n\n  //we use this to fetch the data just ones. But see below how!!!\n  useEffect(() => {\n\n    //axios({url, ...options}).then(res => console.log(res.data));\n\n    //kyc(url, options).then(res => console.log('kyc', res));\n\n    fetch(url, options).then(result =>{\n      console.log(result);\n      result.json().then(output => {\n        console.log(output);\n        //code goes here\n        setCountryList(output.map(item => <Card imgSrc = {item.flag} name = {item.name}/>));\n      })\n    });\n  }, []);//this array must be empty, or the component will be re-rendered constantly.\n\n  return (\n    <div className=\"container\">\n      <h1>Flags of the World</h1>\n      <div className=\"App\">\n          {countryList}\n      </div>\n    </div>\n  );\n}\n\nexport default Countries;","import Login from '../pages/Login';\n\nexport default function (props) {\n    let output;\n    if (props.isLoggedIn == true) {\n        output = props.children;\n    } else {\n        output = <Login setIsLoggedIn = {props.setIsLoggedIn} />\n    }\n    return output;\n}","import './App.css';\nimport {Route, Switch} from 'react-router-dom';\nimport Login from './pages/Login';\nimport Countries from './pages/Countries';\nimport {useState, useEffect} from 'react';\nimport AuthCheck from './components/AuthCheck';\n\nfunction App() {\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    let token = localStorage.getItem('token');\n    if(token != null){\n      setIsLoggedIn(true);\n    }else{\n      setIsLoggedIn(false);\n    }\n  }, []);\n\n  let countries = <Login setIsLoggedIn = {setIsLoggedIn}/>;\n  if(isLoggedIn){\n    countries = <Countries/>;\n  }\n\n  let personalRoutes =[\n    <Route path = '/personal/home'><h1>Test</h1></Route>,\n    <Route path = '/personal/emails'>{countries}</Route>,\n    <Route path = '/personal/dashboard'><h1>Test2</h1></Route>,\n    <Route path = '/personal/profile'>{countries}</Route>\n  ];\n\n  //let authCheck = <Login setIsLoggedIn = {setIsLoggedIn}/>;\n\n  return (\n    <Switch>\n      <Route path = \"/login\">\n        <Login setIsLoggedIn = {setIsLoggedIn}/>\n      </Route>\n\n      <Route path = \"/countries\">\n        <AuthCheck isLoggedIn = {isLoggedIn} setIsLoggedIn = {setIsLoggedIn}>\n          {countries}\n        </AuthCheck>\n      </Route>\n\n      <Route path = \"/personal\">\n        <AuthCheck isLoggedIn = {isLoggedIn} setIsLoggedIn = {setIsLoggedIn}>\n          {personalRoutes}\n        </AuthCheck>\n      </Route>\n\n      <Route exact path = \"/\">\n        <div>\n          <h1>Welcome on Countries & Login App!</h1>\n        </div>\n        <AuthCheck isLoggedIn = {isLoggedIn} setIsLoggedIn = {setIsLoggedIn}>\n          {countries}\n        </AuthCheck>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n    <BrowserRouter basename = {process.env.PUBLIC_URL}>\n      <App/>\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}